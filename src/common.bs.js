// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function unzip(xs) {
  var _fsts = /* [] */0;
  var _snds = /* [] */0;
  var _param = xs;
  while(true) {
    var param = _param;
    var snds = _snds;
    var fsts = _fsts;
    if (!param) {
      return /* tuple */[
              List.rev(fsts),
              List.rev(snds)
            ];
    }
    var match = param[0];
    _param = param[1];
    _snds = /* :: */[
      match[1],
      snds
    ];
    _fsts = /* :: */[
      match[0],
      fsts
    ];
    continue ;
  };
}

function unwrap_seq(_param) {
  while(true) {
    var param = _param;
    if (!param) {
      return /* [] */0;
    }
    var x = param[0];
    if (x !== undefined) {
      return /* :: */[
              Caml_option.valFromOption(x),
              unwrap_seq(param[1])
            ];
    }
    _param = param[1];
    continue ;
  };
}

function zip(xs, ys) {
  var _res = /* [] */0;
  var _xs = xs;
  var _ys = ys;
  while(true) {
    var ys$1 = _ys;
    var xs$1 = _xs;
    var res = _res;
    if (!xs$1) {
      return List.rev(res);
    }
    if (!ys$1) {
      return List.rev(res);
    }
    _ys = ys$1[1];
    _xs = xs$1[1];
    _res = /* :: */[
      /* tuple */[
        xs$1[0],
        ys$1[0]
      ],
      res
    ];
    continue ;
  };
}

var List$1 = {
  length: List.length,
  compare_lengths: List.compare_lengths,
  compare_length_with: List.compare_length_with,
  cons: List.cons,
  hd: List.hd,
  tl: List.tl,
  nth: List.nth,
  nth_opt: List.nth_opt,
  rev: List.rev,
  init: List.init,
  append: List.append,
  rev_append: List.rev_append,
  concat: List.concat,
  flatten: List.flatten,
  iter: List.iter,
  iteri: List.iteri,
  map: List.map,
  mapi: List.mapi,
  rev_map: List.rev_map,
  fold_left: List.fold_left,
  fold_right: List.fold_right,
  iter2: List.iter2,
  map2: List.map2,
  rev_map2: List.rev_map2,
  fold_left2: List.fold_left2,
  fold_right2: List.fold_right2,
  for_all: List.for_all,
  exists: List.exists,
  for_all2: List.for_all2,
  exists2: List.exists2,
  mem: List.mem,
  memq: List.memq,
  find: List.find,
  find_opt: List.find_opt,
  filter: List.filter,
  find_all: List.find_all,
  partition: List.partition,
  assoc: List.assoc,
  assoc_opt: List.assoc_opt,
  assq: List.assq,
  assq_opt: List.assq_opt,
  mem_assoc: List.mem_assoc,
  mem_assq: List.mem_assq,
  remove_assoc: List.remove_assoc,
  remove_assq: List.remove_assq,
  split: List.split,
  combine: List.combine,
  sort: List.sort,
  stable_sort: List.stable_sort,
  fast_sort: List.fast_sort,
  sort_uniq: List.sort_uniq,
  merge: List.merge,
  unzip: unzip,
  unwrap_seq: unwrap_seq,
  zip: zip
};

function update(i, e, xs) {
  var xs$1 = $$Array.copy(xs);
  Caml_array.caml_array_set(xs$1, i, e);
  return xs$1;
}

var $$Array$1 = {
  make_float: $$Array.make_float,
  init: $$Array.init,
  make_matrix: $$Array.make_matrix,
  create_matrix: $$Array.create_matrix,
  append: $$Array.append,
  concat: $$Array.concat,
  sub: $$Array.sub,
  copy: $$Array.copy,
  fill: $$Array.fill,
  blit: $$Array.blit,
  to_list: $$Array.to_list,
  of_list: $$Array.of_list,
  iter: $$Array.iter,
  iteri: $$Array.iteri,
  map: $$Array.map,
  mapi: $$Array.mapi,
  fold_left: $$Array.fold_left,
  fold_right: $$Array.fold_right,
  iter2: $$Array.iter2,
  map2: $$Array.map2,
  for_all: $$Array.for_all,
  exists: $$Array.exists,
  mem: $$Array.mem,
  memq: $$Array.memq,
  sort: $$Array.sort,
  stable_sort: $$Array.stable_sort,
  fast_sort: $$Array.fast_sort,
  Floatarray: $$Array.Floatarray,
  update: update
};

function flip(f, x, y) {
  return Curry._2(f, y, x);
}

function sequence(param) {
  if (!param) {
    return /* [] */0;
  }
  var gs = param[1];
  var g = param[0];
  if (!gs) {
    return List.map((function (x) {
                  return /* :: */[
                          x,
                          /* [] */0
                        ];
                }), g);
  }
  var tls = sequence(gs);
  return List.concat(List.map((function (tl) {
                    return List.map((function (param) {
                                  return List.cons(param, tl);
                                }), g);
                  }), tls));
}

function identity(x) {
  return x;
}

function $$const(x, param) {
  return x;
}

exports.List = List$1;
exports.$$Array = $$Array$1;
exports.flip = flip;
exports.sequence = sequence;
exports.identity = identity;
exports.$$const = $$const;
/* No side effect */
