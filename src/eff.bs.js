// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Core$Jit = require("./core.bs.js");
var Smap$Jit = require("./smap.bs.js");
var Sset$Jit = require("./sset.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Common$Jit = require("./common.bs.js");
var Darray$Jit = require("./darray.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function type_union(a, b) {
  var exit = 0;
  var exit$1 = 0;
  var exit$2 = 0;
  var exit$3 = 0;
  var exit$4 = 0;
  if (typeof a === "number") {
    switch (a) {
      case /* TopT */1 :
          return /* TopT */1;
      case /* BottomT */2 :
          if (typeof b === "number") {
            switch (b) {
              case /* NoneT */0 :
                  exit$3 = 5;
                  break;
              case /* TopT */1 :
                  exit$4 = 6;
                  break;
              case /* BottomT */2 :
                  return Pervasives.failwith("type_union cannot be used on 2 undefined items.");
              
            }
          } else {
            exit$3 = 5;
          }
          break;
      default:
        exit$4 = 6;
    }
  } else if (a.tag === /* UnionT */6) {
    if (typeof b === "number") {
      switch (b) {
        case /* TopT */1 :
            exit$4 = 6;
            break;
        case /* BottomT */2 :
            exit$2 = 4;
            break;
        default:
          exit$1 = 3;
      }
    } else {
      if (b.tag === /* UnionT */6) {
        return /* UnionT */Block.__(6, [Curry._2(Common$Jit.List.sort_uniq, Caml_obj.caml_compare, Pervasives.$at(a[0], b[0]))]);
      }
      exit$1 = 3;
    }
  } else {
    exit$4 = 6;
  }
  if (exit$4 === 6) {
    if (typeof b === "number") {
      if (b === 1) {
        return /* TopT */1;
      }
      exit$3 = 5;
    } else {
      exit$3 = 5;
    }
  }
  if (exit$3 === 5) {
    if (typeof a === "number") {
      if (a >= 2) {
        return b;
      }
      exit$2 = 4;
    } else {
      exit$2 = 4;
    }
  }
  if (exit$2 === 4) {
    if (typeof b === "number") {
      if (b >= 2) {
        return a;
      }
      exit$1 = 3;
    } else {
      exit$1 = 3;
    }
  }
  if (exit$1 === 3) {
    if (typeof a === "number") {
      exit = 2;
    } else {
      if (a.tag === /* UnionT */6) {
        return /* UnionT */Block.__(6, [Sset$Jit.add(b, a[0])]);
      }
      exit = 2;
    }
  }
  if (exit === 2 && typeof b !== "number" && b.tag === /* UnionT */6) {
    return /* UnionT */Block.__(6, [Sset$Jit.add(a, b[0])]);
  }
  if (Caml_obj.caml_equal(a, b)) {
    return a;
  } else {
    return /* UnionT */Block.__(6, [/* :: */[
                a,
                /* :: */[
                  b,
                  /* [] */0
                ]
              ]]);
  }
}

var bool_t = /* NomT */Block.__(4, ["bool"]);

var int_t = /* NomT */Block.__(4, ["int"]);

var float_t = /* NomT */Block.__(4, ["float"]);

var string_t = /* NomT */Block.__(4, ["string"]);

function type_of_const(xs) {
  if (typeof xs === "number") {
    if (xs === /* NoneL */0) {
      return /* NoneT */0;
    } else {
      return /* BottomT */2;
    }
  }
  switch (xs.tag | 0) {
    case /* IntL */0 :
        return int_t;
    case /* BoolL */1 :
        return bool_t;
    case /* FloatL */2 :
        return float_t;
    case /* StrL */3 :
        return string_t;
    case /* TupleL */4 :
        return /* TupleT */Block.__(1, [Curry._2(Common$Jit.List.map, type_of_const, xs[0])]);
    case /* InstrinsicL */5 :
        return /* IntrinsicT */Block.__(8, [xs[0]]);
    case /* TypeL */6 :
        return /* TypeT */Block.__(2, [xs[0]]);
    
  }
}

function MkSt(X) {
  var it = X.x;
  var repr_eval = function (a) {
    if (!a.tag) {
      return {
              typ: type_of_const(a[0]),
              value: a
            };
    }
    var i = Smap$Jit.find(a[0], it.n2i);
    return Caml_array.caml_array_get(it.slots, i);
  };
  var assign_vars = function (vs) {
    var slots$prime = Curry._1(Common$Jit.$$Array.copy, it.slots);
    return Common$Jit.flip(Common$Jit.List.iter, vs, (function (param) {
                  var v1 = param[0];
                  var i1 = Smap$Jit.find(v1, it.n2i);
                  var i2 = Smap$Jit.find(param[1], it.n2i);
                  var s2 = Caml_array.caml_array_get(slots$prime, i2);
                  if (!s2.value.tag) {
                    return Caml_array.caml_array_set(it.slots, i1, s2);
                  }
                  Darray$Jit.append(it.cur_block, /* Ir_assign */Block.__(4, [
                          v1,
                          /* Ir_s */Block.__(0, [s2])
                        ]));
                  return Caml_array.caml_array_set(it.slots, i1, {
                              typ: s2.typ,
                              value: /* D */Block.__(1, [v1])
                            });
                }));
  };
  var assign = function (target) {
    var i_target = Smap$Jit.find(target, it.n2i);
    var s_target = Caml_array.caml_array_get(it.slots, i_target);
    var match = s_target.typ;
    if (typeof match === "number" && match === 1) {
      return (function (repr) {
          var value = repr_eval(repr);
          return Darray$Jit.append(it.cur_block, /* Ir_assign */Block.__(4, [
                        target,
                        /* Ir_s */Block.__(0, [value])
                      ]));
        });
    }
    return (function ($$var) {
        if (!$$var.tag) {
          return Caml_array.caml_array_set(it.slots, i_target, {
                      typ: type_of_const($$var[0]),
                      value: $$var
                    });
        }
        var $$var$1 = $$var[0];
        var i_var = Smap$Jit.find($$var$1, it.n2i);
        var s = Caml_array.caml_array_get(it.slots, i_var);
        var match = s.typ;
        if (typeof match === "number" && match >= 2) {
          return Pervasives.failwith("undefined variable " + $$var$1[1]);
        }
        if (!s.value.tag) {
          return Caml_array.caml_array_set(it.slots, i_target, s);
        }
        Darray$Jit.append(it.cur_block, /* Ir_assign */Block.__(4, [
                target,
                /* Ir_s */Block.__(0, [s])
              ]));
        return Caml_array.caml_array_set(it.slots, i_target, {
                    typ: s.typ,
                    value: /* D */Block.__(1, [target])
                  });
      });
  };
  var mark_reached = function (lbl) {
    it.reached = Sset$Jit.add(lbl, it.reached);
    
  };
  var has_reached = function (lbl) {
    return Sset$Jit.mem(lbl, it.reached);
  };
  var with_local = function (do_it) {
    var slots$prime = Curry._1(Common$Jit.$$Array.copy, it.slots);
    var slots = it.slots;
    var reached = it.reached;
    var cur_lbl = it.cur_lbl;
    var cur_block = it.cur_block;
    it.slots = slots$prime;
    var ret = Curry._1(do_it, undefined);
    it.slots = slots;
    it.reached = reached;
    it.cur_block = cur_block;
    it.cur_lbl = cur_lbl;
    return ret;
  };
  var add_instr = function (instr) {
    return Darray$Jit.append(it.cur_block, instr);
  };
  var dynamicalize_all = function (param) {
    return Curry._2(Common$Jit.List.iter, (function (param) {
                  var i = param[1];
                  var n = param[0];
                  var v = Caml_array.caml_array_get(it.slots, i);
                  Caml_array.caml_array_set(it.slots, i, {
                        typ: /* TopT */1,
                        value: /* D */Block.__(1, [n])
                      });
                  var typ = v.typ;
                  if (typeof typ === "number") {
                    switch (typ) {
                      case /* TopT */1 :
                          return ;
                      case /* BottomT */2 :
                          return Pervasives.failwith("TODO");
                      default:
                        
                    }
                  } else if (typ.tag === /* UnionT */6) {
                    return ;
                  }
                  var func = repr_eval(/* S */Block.__(0, [/* InstrinsicL */Block.__(5, [/* Upcast */6])]));
                  var args = Curry._2(Common$Jit.List.map, repr_eval, /* :: */[
                        /* S */Block.__(0, [/* TypeL */Block.__(6, [typ])]),
                        /* :: */[
                          v.value,
                          /* [] */0
                        ]
                      ]);
                  var instr_001 = /* Ir_call */Block.__(1, [
                      /* Ir_s */Block.__(0, [func]),
                      Curry._2(Common$Jit.List.map, (function (x) {
                              return /* Ir_s */Block.__(0, [x]);
                            }), args),
                      /* [] */0
                    ]);
                  var instr = /* Ir_assign */Block.__(4, [
                      n,
                      instr_001
                    ]);
                  return Darray$Jit.append(it.cur_block, instr);
                }), it.n2i);
  };
  var enter_block = function (param) {
    it.cur_block = param[1];
    it.cur_lbl = param[0];
    
  };
  var add_return_type = function (t) {
    it.ret = type_union(it.ret, t);
    
  };
  var genlbl = function (param) {
    var v = it.lbl_count;
    it.lbl_count = v + 1 | 0;
    return /* tuple */[
            it.scope_level,
            String(v)
          ];
  };
  var union_types = function (param) {
    return Common$Jit.List.unwrap_seq(Curry._1(Common$Jit.$$Array.to_list, Curry._2(Common$Jit.$$Array.mapi, (function (i, param) {
                          var ts = param.typ;
                          if (typeof ts === "number" || ts.tag !== /* UnionT */6) {
                            return ;
                          } else {
                            return /* tuple */[
                                    i,
                                    ts[0]
                                  ];
                          }
                        }), it.slots)));
  };
  var create_block = function (lbl) {
    var config_001 = Curry._1(Common$Jit.$$Array.copy, it.slots);
    var config = /* tuple */[
      lbl,
      config_001
    ];
    var new_lbl = genlbl(undefined);
    var block = Darray$Jit.from_array([/* Ir_label */Block.__(6, [new_lbl])]);
    it.out_bbs = Curry._3(Core$Jit.M_state.add, config, /* tuple */[
          new_lbl,
          block
        ], it.out_bbs);
    return block;
  };
  var add_config = function (config) {
    var label = genlbl(undefined);
    var block = Darray$Jit.empty(undefined);
    it.out_bbs = Curry._3(Core$Jit.M_state.add, config, /* tuple */[
          label,
          block
        ], it.out_bbs);
    return /* tuple */[
            label,
            block
          ];
  };
  var revmap = Curry._2(Common$Jit.List.map, (function (param) {
          return /* tuple */[
                  param[1],
                  param[0]
                ];
        }), it.n2i);
  var dynamic_values = Curry._2(Common$Jit.$$Array.init, it.slots.length, (function (i) {
          return {
                  typ: /* TopT */1,
                  value: /* D */Block.__(1, [Smap$Jit.find(i, revmap)])
                };
        }));
  var make_config = function (param) {
    return /* tuple */[
            it.cur_lbl,
            Curry._1(Common$Jit.$$Array.copy, it.slots)
          ];
  };
  var lookup_config = function (config) {
    return Curry._2(Core$Jit.M_state.find_opt, config, it.out_bbs);
  };
  var set_type = function (param) {
    var i = Smap$Jit.find(param[0], it.n2i);
    var init = Caml_array.caml_array_get(it.slots, i);
    return Caml_array.caml_array_set(it.slots, i, {
                typ: param[1],
                value: init.value
              });
  };
  var set_var = function ($$var, lens) {
    var i = Smap$Jit.find($$var, it.n2i);
    return Caml_array.caml_array_set(it.slots, i, Curry._1(lens, Caml_array.caml_array_get(it.slots, i)));
  };
  return {
          X: X,
          it: it,
          assign_vars: assign_vars,
          assign: assign,
          mark_reached: mark_reached,
          has_reached: has_reached,
          with_local: with_local,
          dynamicalize_all: dynamicalize_all,
          set_type: set_type,
          enter_block: enter_block,
          add_instr: add_instr,
          add_return_type: add_return_type,
          genlbl: genlbl,
          union_types: union_types,
          create_block: create_block,
          add_config: add_config,
          dynamic_values: dynamic_values,
          make_config: make_config,
          lookup_config: lookup_config,
          repr_eval: repr_eval,
          set_var: set_var
        };
}

function CopySt(S) {
  var X = S.X;
  var it = X.x;
  var repr_eval = function (a) {
    if (!a.tag) {
      return {
              typ: type_of_const(a[0]),
              value: a
            };
    }
    var i = Smap$Jit.find(a[0], it.n2i);
    return Caml_array.caml_array_get(it.slots, i);
  };
  var assign_vars = function (vs) {
    var slots$prime = Curry._1(Common$Jit.$$Array.copy, it.slots);
    return Common$Jit.flip(Common$Jit.List.iter, vs, (function (param) {
                  var v1 = param[0];
                  var i1 = Smap$Jit.find(v1, it.n2i);
                  var i2 = Smap$Jit.find(param[1], it.n2i);
                  var s2 = Caml_array.caml_array_get(slots$prime, i2);
                  if (!s2.value.tag) {
                    return Caml_array.caml_array_set(it.slots, i1, s2);
                  }
                  Darray$Jit.append(it.cur_block, /* Ir_assign */Block.__(4, [
                          v1,
                          /* Ir_s */Block.__(0, [s2])
                        ]));
                  return Caml_array.caml_array_set(it.slots, i1, {
                              typ: s2.typ,
                              value: /* D */Block.__(1, [v1])
                            });
                }));
  };
  var assign = function (target) {
    var i_target = Smap$Jit.find(target, it.n2i);
    var s_target = Caml_array.caml_array_get(it.slots, i_target);
    var match = s_target.typ;
    if (typeof match === "number" && match === 1) {
      return (function (repr) {
          var value = repr_eval(repr);
          return Darray$Jit.append(it.cur_block, /* Ir_assign */Block.__(4, [
                        target,
                        /* Ir_s */Block.__(0, [value])
                      ]));
        });
    }
    return (function ($$var) {
        if (!$$var.tag) {
          return Caml_array.caml_array_set(it.slots, i_target, {
                      typ: type_of_const($$var[0]),
                      value: $$var
                    });
        }
        var $$var$1 = $$var[0];
        var i_var = Smap$Jit.find($$var$1, it.n2i);
        var s = Caml_array.caml_array_get(it.slots, i_var);
        var match = s.typ;
        if (typeof match === "number" && match >= 2) {
          return Pervasives.failwith("undefined variable " + $$var$1[1]);
        }
        if (!s.value.tag) {
          return Caml_array.caml_array_set(it.slots, i_target, s);
        }
        Darray$Jit.append(it.cur_block, /* Ir_assign */Block.__(4, [
                target,
                /* Ir_s */Block.__(0, [s])
              ]));
        return Caml_array.caml_array_set(it.slots, i_target, {
                    typ: s.typ,
                    value: /* D */Block.__(1, [target])
                  });
      });
  };
  var mark_reached = function (lbl) {
    it.reached = Sset$Jit.add(lbl, it.reached);
    
  };
  var has_reached = function (lbl) {
    return Sset$Jit.mem(lbl, it.reached);
  };
  var with_local = function (do_it) {
    var slots$prime = Curry._1(Common$Jit.$$Array.copy, it.slots);
    var slots = it.slots;
    var reached = it.reached;
    var cur_lbl = it.cur_lbl;
    var cur_block = it.cur_block;
    it.slots = slots$prime;
    var ret = Curry._1(do_it, undefined);
    it.slots = slots;
    it.reached = reached;
    it.cur_block = cur_block;
    it.cur_lbl = cur_lbl;
    return ret;
  };
  var add_instr = function (instr) {
    return Darray$Jit.append(it.cur_block, instr);
  };
  var dynamicalize_all = function (param) {
    return Curry._2(Common$Jit.List.iter, (function (param) {
                  var i = param[1];
                  var n = param[0];
                  var v = Caml_array.caml_array_get(it.slots, i);
                  Caml_array.caml_array_set(it.slots, i, {
                        typ: /* TopT */1,
                        value: /* D */Block.__(1, [n])
                      });
                  var typ = v.typ;
                  if (typeof typ === "number") {
                    switch (typ) {
                      case /* TopT */1 :
                          return ;
                      case /* BottomT */2 :
                          return Pervasives.failwith("TODO");
                      default:
                        
                    }
                  } else if (typ.tag === /* UnionT */6) {
                    return ;
                  }
                  var func = repr_eval(/* S */Block.__(0, [/* InstrinsicL */Block.__(5, [/* Upcast */6])]));
                  var args = Curry._2(Common$Jit.List.map, repr_eval, /* :: */[
                        /* S */Block.__(0, [/* TypeL */Block.__(6, [typ])]),
                        /* :: */[
                          v.value,
                          /* [] */0
                        ]
                      ]);
                  var instr_001 = /* Ir_call */Block.__(1, [
                      /* Ir_s */Block.__(0, [func]),
                      Curry._2(Common$Jit.List.map, (function (x) {
                              return /* Ir_s */Block.__(0, [x]);
                            }), args),
                      /* [] */0
                    ]);
                  var instr = /* Ir_assign */Block.__(4, [
                      n,
                      instr_001
                    ]);
                  return Darray$Jit.append(it.cur_block, instr);
                }), it.n2i);
  };
  var enter_block = function (param) {
    it.cur_block = param[1];
    it.cur_lbl = param[0];
    
  };
  var add_return_type = function (t) {
    it.ret = type_union(it.ret, t);
    
  };
  var genlbl = function (param) {
    var v = it.lbl_count;
    it.lbl_count = v + 1 | 0;
    return /* tuple */[
            it.scope_level,
            String(v)
          ];
  };
  var union_types = function (param) {
    return Common$Jit.List.unwrap_seq(Curry._1(Common$Jit.$$Array.to_list, Curry._2(Common$Jit.$$Array.mapi, (function (i, param) {
                          var ts = param.typ;
                          if (typeof ts === "number" || ts.tag !== /* UnionT */6) {
                            return ;
                          } else {
                            return /* tuple */[
                                    i,
                                    ts[0]
                                  ];
                          }
                        }), it.slots)));
  };
  var create_block = function (lbl) {
    var config_001 = Curry._1(Common$Jit.$$Array.copy, it.slots);
    var config = /* tuple */[
      lbl,
      config_001
    ];
    var new_lbl = genlbl(undefined);
    var block = Darray$Jit.from_array([/* Ir_label */Block.__(6, [new_lbl])]);
    it.out_bbs = Curry._3(Core$Jit.M_state.add, config, /* tuple */[
          new_lbl,
          block
        ], it.out_bbs);
    return block;
  };
  var add_config = function (config) {
    var label = genlbl(undefined);
    var block = Darray$Jit.empty(undefined);
    it.out_bbs = Curry._3(Core$Jit.M_state.add, config, /* tuple */[
          label,
          block
        ], it.out_bbs);
    return /* tuple */[
            label,
            block
          ];
  };
  var revmap = Curry._2(Common$Jit.List.map, (function (param) {
          return /* tuple */[
                  param[1],
                  param[0]
                ];
        }), it.n2i);
  var dynamic_values = Curry._2(Common$Jit.$$Array.init, it.slots.length, (function (i) {
          return {
                  typ: /* TopT */1,
                  value: /* D */Block.__(1, [Smap$Jit.find(i, revmap)])
                };
        }));
  var make_config = function (param) {
    return /* tuple */[
            it.cur_lbl,
            Curry._1(Common$Jit.$$Array.copy, it.slots)
          ];
  };
  var lookup_config = function (config) {
    return Curry._2(Core$Jit.M_state.find_opt, config, it.out_bbs);
  };
  var set_type = function (param) {
    var i = Smap$Jit.find(param[0], it.n2i);
    var init = Caml_array.caml_array_get(it.slots, i);
    return Caml_array.caml_array_set(it.slots, i, {
                typ: param[1],
                value: init.value
              });
  };
  var set_var = function ($$var, lens) {
    var i = Smap$Jit.find($$var, it.n2i);
    return Caml_array.caml_array_set(it.slots, i, Curry._1(lens, Caml_array.caml_array_get(it.slots, i)));
  };
  return {
          X: X,
          it: it,
          assign_vars: assign_vars,
          assign: assign,
          mark_reached: mark_reached,
          has_reached: has_reached,
          with_local: with_local,
          dynamicalize_all: dynamicalize_all,
          set_type: set_type,
          enter_block: enter_block,
          add_instr: add_instr,
          add_return_type: add_return_type,
          genlbl: genlbl,
          union_types: union_types,
          create_block: create_block,
          add_config: add_config,
          dynamic_values: dynamic_values,
          make_config: make_config,
          lookup_config: lookup_config,
          repr_eval: repr_eval,
          set_var: set_var
        };
}

exports.type_union = type_union;
exports.bool_t = bool_t;
exports.int_t = int_t;
exports.float_t = float_t;
exports.string_t = string_t;
exports.type_of_const = type_of_const;
exports.MkSt = MkSt;
exports.CopySt = CopySt;
/* Core-Jit Not a pure module */
