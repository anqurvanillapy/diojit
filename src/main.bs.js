// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Sys = require("bs-platform/lib/js/sys.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Lexing = require("bs-platform/lib/js/lexing.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Core$Jit = require("./core.bs.js");
var Lexer$Jit = require("./lexer.bs.js");
var Common$Jit = require("./common.bs.js");
var Parser$Jit = require("./parser.bs.js");
var Pretty$Jit = require("./pretty.bs.js");

function print_position(outx, lexbuf) {
  var pos = lexbuf.lex_curr_p;
  return Curry._3(Printf.fprintf(outx, /* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* Char_literal */Block.__(12, [
                          /* ":" */58,
                          /* Int */Block.__(4, [
                              /* Int_d */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* Char_literal */Block.__(12, [
                                  /* ":" */58,
                                  /* Int */Block.__(4, [
                                      /* Int_d */0,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "%s:%d:%d"
                ]), pos.pos_fname, pos.pos_lnum, (pos.pos_cnum - pos.pos_bol | 0) + 1 | 0);
}

function run_parser(lexbuf) {
  return Parser$Jit.prog(Lexer$Jit.read, lexbuf);
}

function parse(filename) {
  var lexbuf = Lexing.from_string(Fs.readFileSync(filename, "utf8"));
  return Parser$Jit.prog(Lexer$Jit.read, lexbuf);
}

var args = Curry._1(Common$Jit.$$Array.to_list, Sys.argv);

var exit = 0;

if (args) {
  var match = args[1];
  if (match) {
    var match$1 = match[1];
    if (match$1 && !match$1[1]) {
      var lexbuf = Lexing.from_string(Fs.readFileSync(match$1[0], "utf8"));
      var fdefs = Curry._1(Core$Jit.M_int.bindings, Parser$Jit.prog(Lexer$Jit.read, lexbuf));
      Common$Jit.flip(Common$Jit.List.iter, fdefs, (function (param) {
              console.log(Pretty$Jit.show_func_def(param[1]));
              
            }));
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
} else {
  exit = 1;
}

if (exit === 1) {
  console.log("invalid arguments : " + $$String.concat(" ", args));
}

exports.print_position = print_position;
exports.run_parser = run_parser;
exports.parse = parse;
/* args Not a pure module */
