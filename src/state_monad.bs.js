// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function $$return(a) {
  return {
          run_state: (function (s) {
              return /* tuple */[
                      a,
                      s
                    ];
            })
        };
}

function $great$great$eq(m, k) {
  return {
          run_state: (function (s) {
              var match = Curry._1(m.run_state, s);
              return Curry._1(Curry._1(k, match[0]).run_state, match[1]);
            })
        };
}

function $great$great(m1, m2) {
  return {
          run_state: (function (s) {
              var match = Curry._1(m1.run_state, s);
              return Curry._1(m2.run_state, match[1]);
            })
        };
}

var get = {
  run_state: (function (s) {
      return /* tuple */[
              s,
              s
            ];
    })
};

function gets(f) {
  return {
          run_state: (function (s) {
              return /* tuple */[
                      Curry._1(f, s),
                      s
                    ];
            })
        };
}

function modify(f) {
  return {
          run_state: (function (s) {
              return /* tuple */[
                      undefined,
                      Curry._1(f, s)
                    ];
            })
        };
}

function put(s) {
  return {
          run_state: (function (param) {
              return /* tuple */[
                      undefined,
                      s
                    ];
            })
        };
}

function forM_(xs, k) {
  return $great$great(List.fold_left((function (a, b) {
                    return $great$great(a, Curry._1(k, b));
                  }), {
                  run_state: (function (s) {
                      return /* tuple */[
                              undefined,
                              s
                            ];
                    })
                }, xs), {
              run_state: (function (s) {
                  return /* tuple */[
                          undefined,
                          s
                        ];
                })
            });
}

function forM(xs, k) {
  if (!xs) {
    return {
            run_state: (function (s) {
                return /* tuple */[
                        /* [] */0,
                        s
                      ];
              })
          };
  }
  var xs$1 = xs[1];
  return $great$great$eq(Curry._1(k, xs[0]), (function (hd$prime) {
                return $great$great$eq(forM(xs$1, k), (function (tl$prime) {
                              var a = /* :: */[
                                hd$prime,
                                tl$prime
                              ];
                              return {
                                      run_state: (function (s) {
                                          return /* tuple */[
                                                  a,
                                                  s
                                                ];
                                        })
                                    };
                            }));
              }));
}

function with_st(m) {
  return $great$great$eq(get, (function (old) {
                return $great$great$eq(m, (function (a) {
                              return $great$great({
                                          run_state: (function (param) {
                                              return /* tuple */[
                                                      undefined,
                                                      old
                                                    ];
                                            })
                                        }, {
                                          run_state: (function (s) {
                                              return /* tuple */[
                                                      a,
                                                      s
                                                    ];
                                            })
                                        });
                            }));
              }));
}

function run_state(param, s) {
  return Curry._1(param.run_state, s);
}

var MState = {
  $$return: $$return,
  $great$great$eq: $great$great$eq,
  $great$great: $great$great,
  get: get,
  gets: gets,
  modify: modify,
  put: put,
  forM_: forM_,
  forM: forM,
  with_st: with_st,
  run_state: run_state
};

exports.MState = MState;
/* No side effect */
