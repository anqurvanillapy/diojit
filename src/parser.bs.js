// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Core$Jit = require("./core.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var $$Error = Caml_exceptions.create("Parser-Jit.MenhirBasics.Error");

function _menhir_goto_loption_separated_nonempty_list_COMMA_repr__(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_s !== 3) {
    if (_menhir_s !== 6) {
      return _menhir_fail(undefined);
    }
    if (_menhir_env._menhir_error) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              273,
              10
            ]
          ];
    }
    var _tok = _menhir_env._menhir_token;
    if (typeof _tok === "number" && _tok === 4) {
      var _menhir_env$1 = _menhir_discard(_menhir_env);
      var match = _menhir_stack[0][0];
      var _v_000 = match[2];
      var _v_001 = _menhir_stack[2];
      var _v$1 = /* Call */Block.__(4, [
          _v_000,
          _v_001,
          _v,
          /* [] */0
        ]);
      return _menhir_goto_instr(_menhir_env$1, match[0], match[1], _v$1);
    }
    if (_menhir_env._menhir_error) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              311,
              12
            ]
          ];
    }
    _menhir_env._menhir_error = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            324,
            10
          ]
        ];
  }
  var _tok$1 = _menhir_env._menhir_token;
  if (typeof _tok$1 === "number" && _tok$1 === 4) {
    var _menhir_env$2 = _menhir_discard(_menhir_env);
    var match$1 = _menhir_stack[0];
    var _v_001$1 = _menhir_stack[2];
    var _v$2 = /* Call */Block.__(4, [
        undefined,
        _v_001$1,
        _v,
        /* [] */0
      ]);
    return _menhir_goto_instr(_menhir_env$2, match$1[0], match$1[1], _v$2);
  }
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            349,
            12
          ]
        ];
  }
  _menhir_env._menhir_error = true;
  return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
}

function _menhir_goto_repr(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var exit = 0;
  switch (_menhir_s) {
    case /* MenhirState87 */4 :
        if (_menhir_env._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  1494,
                  10
                ]
              ];
        }
        var _tok = _menhir_env._menhir_token;
        var exit$1 = 0;
        if (typeof _tok === "number" && _tok === 9) {
          var _menhir_env$1 = _menhir_discard(_menhir_env);
          var _tok$1 = _menhir_env$1._menhir_token;
          if (typeof _tok$1 === "number") {
            switch (_tok$1) {
              case /* TYPE */1 :
                  return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3);
              case /* TRUE */2 :
                  return _menhir_run59(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3);
              case /* RP */4 :
                  return _menhir_reduce25(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3);
              case /* LP */9 :
                  return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3);
              case /* FALSE */15 :
                  return _menhir_run64(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3);
              case /* AT */22 :
                  return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3);
              default:
                if (_menhir_env$1._menhir_error) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "parser.ml",
                          1524,
                          16
                        ]
                      ];
                }
                _menhir_env$1._menhir_error = true;
                return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3);
            }
          } else {
            switch (_tok$1.tag | 0) {
              case /* STRING */0 :
                  return _menhir_run60(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3, _tok$1[0]);
              case /* INT */1 :
                  return _menhir_run61(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3, _tok$1[0]);
              case /* ID */2 :
                  return _menhir_run62(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3, _tok$1[0]);
              case /* FLOAT */3 :
                  return _menhir_run63(_menhir_env$1, _menhir_stack$1, /* MenhirState89 */3, _tok$1[0]);
              
            }
          }
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (_menhir_env._menhir_error) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1528,
                    12
                  ]
                ];
          }
          _menhir_env._menhir_error = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case /* MenhirState89 */3 :
    case /* MenhirState80 */5 :
    case /* MenhirState77 */6 :
        exit = 1;
        break;
    case /* MenhirState75 */7 :
        if (_menhir_env._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  1367,
                  10
                ]
              ];
        }
        var _tok$2 = _menhir_env._menhir_token;
        var exit$2 = 0;
        if (typeof _tok$2 === "number" && _tok$2 === 9) {
          var _menhir_env$2 = _menhir_discard(_menhir_env);
          var _tok$3 = _menhir_env$2._menhir_token;
          if (typeof _tok$3 === "number") {
            switch (_tok$3) {
              case /* TYPE */1 :
                  return _menhir_run6(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6);
              case /* TRUE */2 :
                  return _menhir_run59(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6);
              case /* RP */4 :
                  return _menhir_reduce25(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6);
              case /* LP */9 :
                  return _menhir_run8(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6);
              case /* FALSE */15 :
                  return _menhir_run64(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6);
              case /* AT */22 :
                  return _menhir_run9(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6);
              default:
                if (_menhir_env$2._menhir_error) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "parser.ml",
                          1401,
                          16
                        ]
                      ];
                }
                _menhir_env$2._menhir_error = true;
                return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6);
            }
          } else {
            switch (_tok$3.tag | 0) {
              case /* STRING */0 :
                  return _menhir_run60(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6, _tok$3[0]);
              case /* INT */1 :
                  return _menhir_run61(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6, _tok$3[0]);
              case /* ID */2 :
                  return _menhir_run62(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6, _tok$3[0]);
              case /* FLOAT */3 :
                  return _menhir_run63(_menhir_env$2, _menhir_stack$1, /* MenhirState77 */6, _tok$3[0]);
              
            }
          }
        } else {
          exit$2 = 2;
        }
        if (exit$2 === 2) {
          if (_menhir_env._menhir_error) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1405,
                    12
                  ]
                ];
          }
          _menhir_env._menhir_error = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case /* MenhirState74 */8 :
        var _v_000 = _menhir_stack[2];
        var _v$1 = /* Assign */Block.__(2, [
            _v_000,
            _v
          ]);
        return _menhir_goto_instr(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$1);
    case /* MenhirState67 */9 :
        if (_menhir_env._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  1251,
                  10
                ]
              ];
        }
        var _tok$4 = _menhir_env._menhir_token;
        var exit$3 = 0;
        if (typeof _tok$4 === "number" && _tok$4 === 13) {
          var _menhir_env$3 = _menhir_discard(_menhir_env);
          var _tok$5 = _menhir_env$3._menhir_token;
          var exit$4 = 0;
          if (typeof _tok$5 === "number" || _tok$5.tag !== /* ID */2) {
            exit$4 = 3;
          } else {
            var _menhir_env$4 = _menhir_discard(_menhir_env$3);
            var _tok$6 = _menhir_env$4._menhir_token;
            var exit$5 = 0;
            if (typeof _tok$6 === "number" && _tok$6 === 13) {
              var _menhir_env$5 = _menhir_discard(_menhir_env$4);
              var _tok$7 = _menhir_env$5._menhir_token;
              var exit$6 = 0;
              if (typeof _tok$7 === "number") {
                exit$6 = 5;
              } else {
                if (_tok$7.tag === /* ID */2) {
                  var _menhir_env$6 = _menhir_discard(_menhir_env$5);
                  var _v_001 = _tok$5[0];
                  var _v_002 = _tok$7[0];
                  var _v$2 = /* GotoIf */Block.__(0, [
                      _v,
                      _v_001,
                      _v_002
                    ]);
                  return _menhir_goto_instr(_menhir_env$6, _menhir_stack[0], _menhir_stack[1], _v$2);
                }
                exit$6 = 5;
              }
              if (exit$6 === 5) {
                if (_menhir_env$5._menhir_error) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "parser.ml",
                          1325,
                          24
                        ]
                      ];
                }
                _menhir_env$5._menhir_error = true;
                return _menhir_errorcase(_menhir_env$5, _menhir_stack, _menhir_s);
              }
              
            } else {
              exit$5 = 4;
            }
            if (exit$5 === 4) {
              if (_menhir_env$4._menhir_error) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "parser.ml",
                        1336,
                        20
                      ]
                    ];
              }
              _menhir_env$4._menhir_error = true;
              return _menhir_errorcase(_menhir_env$4, _menhir_stack, _menhir_s);
            }
            
          }
          if (exit$4 === 3) {
            if (_menhir_env$3._menhir_error) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1347,
                      16
                    ]
                  ];
            }
            _menhir_env$3._menhir_error = true;
            return _menhir_errorcase(_menhir_env$3, _menhir_stack, _menhir_s);
          }
          
        } else {
          exit$3 = 2;
        }
        if (exit$3 === 2) {
          if (_menhir_env._menhir_error) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1354,
                    12
                  ]
                ];
          }
          _menhir_env._menhir_error = true;
          return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
        }
        break;
    case /* MenhirState58 */10 :
        var _v$3 = /* Return */Block.__(3, [_v]);
        return _menhir_goto_instr(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$3);
    case /* MenhirState106 */0 :
    case /* MenhirState101 */1 :
    case /* MenhirState93 */2 :
    case /* MenhirState57 */11 :
    case /* MenhirState55 */12 :
    case /* MenhirState48 */13 :
    case /* MenhirState42 */14 :
    case /* MenhirState40 */15 :
    case /* MenhirState35 */16 :
    case /* MenhirState33 */17 :
    case /* MenhirState27 */18 :
    case /* MenhirState25 */19 :
    case /* MenhirState13 */20 :
    case /* MenhirState8 */21 :
    case /* MenhirState7 */22 :
    case /* MenhirState5 */23 :
    case /* MenhirState3 */24 :
    case /* MenhirState0 */25 :
        return _menhir_fail(undefined);
    
  }
  if (exit === 1) {
    if (_menhir_env._menhir_error) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              1418,
              10
            ]
          ];
    }
    var _tok$8 = _menhir_env._menhir_token;
    var exit$7 = 0;
    if (typeof _tok$8 === "number") {
      if (_tok$8 !== 4) {
        if (_tok$8 !== 18) {
          exit$7 = 2;
        } else {
          var _menhir_env$7 = _menhir_discard(_menhir_env);
          var _tok$9 = _menhir_env$7._menhir_token;
          if (typeof _tok$9 === "number") {
            switch (_tok$9) {
              case /* TYPE */1 :
                  return _menhir_run6(_menhir_env$7, _menhir_stack$1, /* MenhirState80 */5);
              case /* TRUE */2 :
                  return _menhir_run59(_menhir_env$7, _menhir_stack$1, /* MenhirState80 */5);
              case /* LP */9 :
                  return _menhir_run8(_menhir_env$7, _menhir_stack$1, /* MenhirState80 */5);
              case /* FALSE */15 :
                  return _menhir_run64(_menhir_env$7, _menhir_stack$1, /* MenhirState80 */5);
              case /* AT */22 :
                  return _menhir_run9(_menhir_env$7, _menhir_stack$1, /* MenhirState80 */5);
              default:
                if (_menhir_env$7._menhir_error) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "parser.ml",
                          1446,
                          16
                        ]
                      ];
                }
                _menhir_env$7._menhir_error = true;
                return _menhir_errorcase(_menhir_env$7, _menhir_stack$1, /* MenhirState80 */5);
            }
          } else {
            switch (_tok$9.tag | 0) {
              case /* STRING */0 :
                  return _menhir_run60(_menhir_env$7, _menhir_stack$1, /* MenhirState80 */5, _tok$9[0]);
              case /* INT */1 :
                  return _menhir_run61(_menhir_env$7, _menhir_stack$1, /* MenhirState80 */5, _tok$9[0]);
              case /* ID */2 :
                  return _menhir_run62(_menhir_env$7, _menhir_stack$1, /* MenhirState80 */5, _tok$9[0]);
              case /* FLOAT */3 :
                  return _menhir_run63(_menhir_env$7, _menhir_stack$1, /* MenhirState80 */5, _tok$9[0]);
              
            }
          }
        }
      } else {
        var _v$4 = /* :: */[
          _v,
          /* [] */0
        ];
        var __menhir_stack = _menhir_stack;
        var __menhir_s = _menhir_s;
        var __v = _v$4;
        while(true) {
          var _v$5 = __v;
          var _menhir_s$1 = __menhir_s;
          var _menhir_stack$2 = __menhir_stack;
          if (_menhir_s$1 >= 7) {
            return _menhir_fail(undefined);
          }
          switch (_menhir_s$1) {
            case /* MenhirState106 */0 :
            case /* MenhirState101 */1 :
            case /* MenhirState93 */2 :
            case /* MenhirState87 */4 :
                return _menhir_fail(undefined);
            case /* MenhirState80 */5 :
                var _v_000$1 = _menhir_stack$2[2];
                var _v$6 = /* :: */[
                  _v_000$1,
                  _v$5
                ];
                __v = _v$6;
                __menhir_s = _menhir_stack$2[1];
                __menhir_stack = _menhir_stack$2[0];
                continue ;
            case /* MenhirState89 */3 :
            case /* MenhirState77 */6 :
                return _menhir_goto_loption_separated_nonempty_list_COMMA_repr__(_menhir_env, _menhir_stack$2, _menhir_s$1, _v$5);
            
          }
        };
      }
    } else {
      exit$7 = 2;
    }
    if (exit$7 === 2) {
      if (_menhir_env._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                1460,
                12
              ]
            ];
      }
      _menhir_env._menhir_error = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
    }
    
  }
  
}

function _menhir_discard(_menhir_env) {
  var lexer = _menhir_env._menhir_lexer;
  var lexbuf = _menhir_env._menhir_lexbuf;
  var _tok = Curry._1(lexer, lexbuf);
  return {
          _menhir_lexer: lexer,
          _menhir_lexbuf: lexbuf,
          _menhir_token: _tok,
          _menhir_error: false
        };
}

function _menhir_errorcase(_menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var exit = 0;
    if (_menhir_s >= 11) {
      switch (_menhir_s - 11 | 0) {
        case /* MenhirState106 */0 :
        case /* MenhirState80 */5 :
            exit = 2;
            break;
        case /* MenhirState101 */1 :
        case /* MenhirState93 */2 :
        case /* MenhirState89 */3 :
        case /* MenhirState77 */6 :
        case /* MenhirState75 */7 :
        case /* MenhirState74 */8 :
        case /* MenhirState67 */9 :
        case /* MenhirState58 */10 :
        case /* MenhirState57 */11 :
        case /* MenhirState55 */12 :
            exit = 1;
            break;
        case /* MenhirState87 */4 :
        case /* MenhirState48 */13 :
        case /* MenhirState42 */14 :
            throw $$Error;
        
      }
    } else {
      exit = 1;
    }
    switch (exit) {
      case 1 :
          __menhir_s = _menhir_stack[1];
          __menhir_stack = _menhir_stack[0];
          continue ;
      case 2 :
          var match = _menhir_stack[0][0];
          __menhir_s = match[1];
          __menhir_stack = match[0];
          continue ;
      
    }
  };
}

function _menhir_fail(param) {
  Printf.fprintf(Pervasives.stderr, /* Format */[
        /* String_literal */Block.__(11, [
            "Internal failure -- please contact the parser generator's developers.\n",
            /* Flush */Block.__(10, [/* End_of_format */0])
          ]),
        "Internal failure -- please contact the parser generator's developers.\n%!"
      ]);
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "parser.ml",
          1953,
          4
        ]
      ];
}

function _menhir_goto_loption_separated_nonempty_list_COMMA_ann__(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            2298,
            6
          ]
        ];
  }
  var _tok = _menhir_env._menhir_token;
  if (typeof _tok === "number" && _tok === 4) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok$1 = _menhir_env$1._menhir_token;
    var exit = 0;
    if (typeof _tok$1 === "number" && _tok$1 === 21) {
      var _menhir_env$2 = _menhir_discard(_menhir_env$1);
      var _tok$2 = _menhir_env$2._menhir_token;
      var exit$1 = 0;
      if (typeof _tok$2 === "number" && _tok$2 === 10) {
        var _menhir_env$3 = _menhir_discard(_menhir_env$2);
        var _tok$3 = _menhir_env$3._menhir_token;
        var exit$2 = 0;
        if (typeof _tok$3 === "number") {
          if (_tok$3 === /* RB */6) {
            return _menhir_goto_loption_separated_nonempty_list_COMMA_ID__(_menhir_env$3, _menhir_stack$1, /* MenhirState25 */19, /* [] */0);
          }
          exit$2 = 4;
        } else {
          if (_tok$3.tag === /* ID */2) {
            var __menhir_env = _menhir_env$3;
            var __menhir_stack = _menhir_stack$1;
            var __menhir_s = /* MenhirState25 */19;
            var __v = _tok$3[0];
            while(true) {
              var _v$1 = __v;
              var _menhir_s$1 = __menhir_s;
              var _menhir_stack$2 = __menhir_stack;
              var _menhir_env$4 = __menhir_env;
              var _menhir_stack$3 = /* tuple */[
                _menhir_stack$2,
                _menhir_s$1,
                _v$1
              ];
              var _menhir_env$5 = _menhir_discard(_menhir_env$4);
              var _tok$4 = _menhir_env$5._menhir_token;
              if (typeof _tok$4 === "number") {
                if (_tok$4 !== 6) {
                  if (_tok$4 === 18) {
                    var _menhir_env$6 = _menhir_discard(_menhir_env$5);
                    var _tok$5 = _menhir_env$6._menhir_token;
                    var exit$3 = 0;
                    if (typeof _tok$5 === "number") {
                      exit$3 = 2;
                    } else {
                      if (_tok$5.tag === /* ID */2) {
                        __v = _tok$5[0];
                        __menhir_s = /* MenhirState27 */18;
                        __menhir_stack = _menhir_stack$3;
                        __menhir_env = _menhir_env$6;
                        continue ;
                      }
                      exit$3 = 2;
                    }
                    if (exit$3 === 2) {
                      if (_menhir_env$6._menhir_error) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              /* tuple */[
                                "parser.ml",
                                2050,
                                12
                              ]
                            ];
                      }
                      _menhir_env$6._menhir_error = true;
                      return _menhir_errorcase(_menhir_env$6, _menhir_stack$3, /* MenhirState27 */18);
                    }
                    
                  }
                  
                } else {
                  var _v$2 = /* :: */[
                    _v$1,
                    /* [] */0
                  ];
                  var __menhir_stack$1 = _menhir_stack$2;
                  var __menhir_s$1 = _menhir_s$1;
                  var __v$1 = _v$2;
                  while(true) {
                    var _v$3 = __v$1;
                    var _menhir_s$2 = __menhir_s$1;
                    var _menhir_stack$4 = __menhir_stack$1;
                    if (_menhir_s$2 !== 18) {
                      if (_menhir_s$2 !== 19) {
                        return _menhir_fail(undefined);
                      } else {
                        return _menhir_goto_loption_separated_nonempty_list_COMMA_ID__(_menhir_env$5, _menhir_stack$4, _menhir_s$2, _v$3);
                      }
                    }
                    var _v_000 = _menhir_stack$4[2];
                    var _v$4 = /* :: */[
                      _v_000,
                      _v$3
                    ];
                    __v$1 = _v$4;
                    __menhir_s$1 = _menhir_stack$4[1];
                    __menhir_stack$1 = _menhir_stack$4[0];
                    continue ;
                  };
                }
              }
              if (_menhir_env$5._menhir_error) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "parser.ml",
                        2072,
                        8
                      ]
                    ];
              }
              _menhir_env$5._menhir_error = true;
              return _menhir_errorcase(_menhir_env$5, _menhir_stack$2, _menhir_s$1);
            };
          }
          exit$2 = 4;
        }
        if (exit$2 === 4) {
          if (_menhir_env$3._menhir_error) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    2332,
                    20
                  ]
                ];
          }
          _menhir_env$3._menhir_error = true;
          return _menhir_errorcase(_menhir_env$3, _menhir_stack$1, /* MenhirState25 */19);
        }
        
      } else {
        exit$1 = 3;
      }
      if (exit$1 === 3) {
        if (_menhir_env$2._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  2336,
                  16
                ]
              ];
        }
        _menhir_env$2._menhir_error = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack, _menhir_s);
      }
      
    } else {
      exit = 2;
    }
    if (exit === 2) {
      if (_menhir_env$1._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                2343,
                12
              ]
            ];
      }
      _menhir_env$1._menhir_error = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
    }
    
  }
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            2350,
            8
          ]
        ];
  }
  _menhir_env._menhir_error = true;
  return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
}

function _menhir_run1(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok !== "number" && _tok.tag === /* ID */2) {
    var _menhir_stack_001 = _tok[0];
    var _menhir_stack$2 = /* tuple */[
      _menhir_stack$1,
      _menhir_stack_001
    ];
    var _menhir_env$2 = _menhir_discard(_menhir_env$1);
    var _tok$1 = _menhir_env$2._menhir_token;
    var exit = 0;
    if (typeof _tok$1 === "number" && _tok$1 === 9) {
      var _menhir_env$3 = _menhir_discard(_menhir_env$2);
      var _tok$2 = _menhir_env$3._menhir_token;
      var exit$1 = 0;
      if (typeof _tok$2 === "number") {
        if (_tok$2 === /* RP */4) {
          return _menhir_goto_loption_separated_nonempty_list_COMMA_ann__(_menhir_env$3, _menhir_stack$2, /* MenhirState3 */24, /* [] */0);
        }
        exit$1 = 3;
      } else {
        if (_tok$2.tag === /* ID */2) {
          return _menhir_run4(_menhir_env$3, _menhir_stack$2, /* MenhirState3 */24, _tok$2[0]);
        }
        exit$1 = 3;
      }
      if (exit$1 === 3) {
        if (_menhir_env$3._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  2608,
                  16
                ]
              ];
        }
        _menhir_env$3._menhir_error = true;
        return _menhir_errorcase(_menhir_env$3, _menhir_stack$2, /* MenhirState3 */24);
      }
      
    } else {
      exit = 2;
    }
    if (exit === 2) {
      if (_menhir_env$2._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                2612,
                12
              ]
            ];
      }
      _menhir_env$2._menhir_error = true;
      return _menhir_errorcase(_menhir_env$2, _menhir_stack, _menhir_s);
    }
    
  }
  if (_menhir_env$1._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            2623,
            8
          ]
        ];
  }
  _menhir_env$1._menhir_error = true;
  return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
}

function _menhir_reduce15(_menhir_env, _menhir_stack, _menhir_s) {
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 0) {
      if (_menhir_s$1 < 25) {
        return _menhir_fail(undefined);
      }
      if (_menhir_env._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                2217,
                10
              ]
            ];
      }
      var _tok = _menhir_env._menhir_token;
      if (typeof _tok === "number" && _tok === 16) {
        var globals = List.mapi((function (i, param) {
                return /* tuple */[
                        param[0],
                        /* FPtrT */Block.__(7, [i])
                      ];
              }), _v);
        var fdefs = List.mapi((function(globals){
            return function (i, param) {
              var f = param[1];
              var init = f.func_entry;
              return /* tuple */[
                      i,
                      {
                        func_entry: {
                          args: init.args,
                          kwargs: init.kwargs,
                          globals: globals,
                          other_bounds: init.other_bounds
                        },
                        body: f.body
                      }
                    ];
            }
            }(globals)), _v);
        return List.fold_left((function (a, param) {
                      return Curry._3(Core$Jit.M_int.add, param[0], param[1], a);
                    }), Core$Jit.M_int.empty, fdefs);
      }
      if (_menhir_env._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                2272,
                12
              ]
            ];
      }
      _menhir_env._menhir_error = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack$1, _menhir_s$1);
    }
    var _v_000 = _menhir_stack$1[2];
    var _v$1 = /* :: */[
      _v_000,
      _v
    ];
    __v = _v$1;
    __menhir_s = _menhir_stack$1[1];
    __menhir_stack = _menhir_stack$1[0];
    continue ;
  };
}

function _menhir_run6(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1._menhir_token;
    if (typeof _tok === "number" && _tok === 10) {
      var _menhir_env$2 = _menhir_discard(_menhir_env$1);
      var _tok$1 = _menhir_env$2._menhir_token;
      var exit = 0;
      if (typeof _tok$1 === "number") {
        if (_tok$1 !== 1) {
          if (_tok$1 === 9) {
            return _menhir_run8(_menhir_env$2, _menhir_stack$1, /* MenhirState7 */22);
          }
          if (_tok$1 === 22) {
            return _menhir_run9(_menhir_env$2, _menhir_stack$1, /* MenhirState7 */22);
          }
          exit = 2;
        } else {
          __menhir_s = /* MenhirState7 */22;
          __menhir_stack = _menhir_stack$1;
          __menhir_env = _menhir_env$2;
          continue ;
        }
      } else {
        exit = 2;
      }
      if (exit === 2) {
        if (_menhir_env$2._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  2102,
                  12
                ]
              ];
        }
        _menhir_env$2._menhir_error = true;
        return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState7 */22);
      }
      
    }
    if (_menhir_env$1._menhir_error) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              2106,
              8
            ]
          ];
    }
    _menhir_env$1._menhir_error = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
  };
}

function _menhir_run62(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* D */Block.__(1, [_v]);
  return _menhir_goto_repr(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run64(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_repr(_menhir_env$1, _menhir_stack, _menhir_s, /* S */Block.__(0, [/* BoolL */Block.__(1, [false])]));
}

function _menhir_run8(__menhir_env, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok = _menhir_env$1._menhir_token;
    if (typeof _tok === "number") {
      switch (_tok) {
        case /* TYPE */1 :
            return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */21);
        case /* RP */4 :
            return _menhir_goto_loption_separated_nonempty_list_XOR_typ__(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */21, /* [] */0);
        case /* LP */9 :
            __menhir_s = /* MenhirState8 */21;
            __menhir_stack = _menhir_stack$1;
            __menhir_env = _menhir_env$1;
            continue ;
        case /* AT */22 :
            return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */21);
        case /* XOR */0 :
        case /* TRUE */2 :
        case /* SEMICOLON */3 :
        case /* RETURN */5 :
        case /* RB */6 :
        case /* PHI */7 :
        case /* MOVE */8 :
        case /* LB */10 :
        case /* LABEL */11 :
        case /* IF */12 :
        case /* GOTO */13 :
        case /* FED */14 :
        case /* FALSE */15 :
        case /* EOF */16 :
        case /* DEF */17 :
        case /* COMMA */18 :
        case /* COLON */19 :
        case /* CALL */20 :
        case /* BOUND */21 :
        case /* ASSIGN */23 :
            break;
        
      }
    }
    if (_menhir_env$1._menhir_error) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              2136,
              8
            ]
          ];
    }
    _menhir_env$1._menhir_error = true;
    return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState8 */21);
  };
}

function _menhir_run59(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_repr(_menhir_env$1, _menhir_stack, _menhir_s, /* S */Block.__(0, [/* BoolL */Block.__(1, [true])]));
}

function _menhir_run61(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* S */Block.__(0, [/* IntL */Block.__(0, [_v])]);
  return _menhir_goto_repr(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run9(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok !== "number") {
    switch (_tok.tag | 0) {
      case /* STRING */0 :
          var _menhir_env$2 = _menhir_discard(_menhir_env$1);
          var _v = /* NomT */Block.__(4, [_tok[0]]);
          return _menhir_goto_typ(_menhir_env$2, _menhir_stack, _menhir_s, _v);
      case /* ID */2 :
          var _menhir_env$3 = _menhir_discard(_menhir_env$1);
          var _v$1 = /* NomT */Block.__(4, [_tok[0][1]]);
          return _menhir_goto_typ(_menhir_env$3, _menhir_stack, _menhir_s, _v$1);
      default:
        
    }
  }
  if (_menhir_env$1._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            2203,
            8
          ]
        ];
  }
  _menhir_env$1._menhir_error = true;
  return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
}

function _menhir_run60(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* S */Block.__(0, [/* StrL */Block.__(3, [_v])]);
  return _menhir_goto_repr(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_run63(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* S */Block.__(0, [/* FloatL */Block.__(2, [_v])]);
  return _menhir_goto_repr(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_loption_separated_nonempty_list_XOR_typ__(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1769,
            6
          ]
        ];
  }
  var _tok = _menhir_env._menhir_token;
  if (typeof _tok === "number" && _tok === 4) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _v$1 = /* UnionT */Block.__(6, [_v]);
    return _menhir_goto_typ(_menhir_env$1, _menhir_stack[0], _menhir_stack[1], _v$1);
  }
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1793,
            8
          ]
        ];
  }
  _menhir_env._menhir_error = true;
  return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
}

function _menhir_goto_loption_separated_nonempty_list_XOR_branch__(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1123,
            6
          ]
        ];
  }
  var _tok = _menhir_env._menhir_token;
  if (typeof _tok === "number" && _tok === 6) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _v
    ];
    if (_menhir_env$1._menhir_error) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              1156,
              10
            ]
          ];
    }
    var _tok$1 = _menhir_env$1._menhir_token;
    var exit = 0;
    if (typeof _tok$1 === "number") {
      switch (_tok$1) {
        case /* RETURN */5 :
            return _menhir_run58(_menhir_env$1, _menhir_stack$1, /* MenhirState57 */11);
        case /* IF */12 :
            return _menhir_run67(_menhir_env$1, _menhir_stack$1, /* MenhirState57 */11);
        case /* GOTO */13 :
            return _menhir_run85(_menhir_env$1, _menhir_stack$1, /* MenhirState57 */11);
        case /* LABEL */11 :
        case /* FED */14 :
            return _menhir_reduce17(_menhir_env$1, _menhir_stack$1, /* MenhirState57 */11);
        case /* CALL */20 :
            return _menhir_run87(_menhir_env$1, _menhir_stack$1, /* MenhirState57 */11);
        default:
          exit = 2;
      }
    } else {
      if (_tok$1.tag === /* ID */2) {
        return _menhir_run73(_menhir_env$1, _menhir_stack$1, /* MenhirState57 */11, _tok$1[0]);
      }
      exit = 2;
    }
    if (exit === 2) {
      if (_menhir_env$1._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                1172,
                12
              ]
            ];
      }
      _menhir_env$1._menhir_error = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState57 */11);
    }
    
  }
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1176,
            8
          ]
        ];
  }
  _menhir_env._menhir_error = true;
  return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
}

function _menhir_run87(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok === "number") {
    switch (_tok) {
      case /* TYPE */1 :
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState87 */4);
      case /* TRUE */2 :
          return _menhir_run59(_menhir_env$1, _menhir_stack$1, /* MenhirState87 */4);
      case /* LP */9 :
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState87 */4);
      case /* FALSE */15 :
          return _menhir_run64(_menhir_env$1, _menhir_stack$1, /* MenhirState87 */4);
      case /* AT */22 :
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState87 */4);
      default:
        if (_menhir_env$1._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  580,
                  8
                ]
              ];
        }
        _menhir_env$1._menhir_error = true;
        return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState87 */4);
    }
  } else {
    switch (_tok.tag | 0) {
      case /* STRING */0 :
          return _menhir_run60(_menhir_env$1, _menhir_stack$1, /* MenhirState87 */4, _tok[0]);
      case /* INT */1 :
          return _menhir_run61(_menhir_env$1, _menhir_stack$1, /* MenhirState87 */4, _tok[0]);
      case /* ID */2 :
          return _menhir_run62(_menhir_env$1, _menhir_stack$1, /* MenhirState87 */4, _tok[0]);
      case /* FLOAT */3 :
          return _menhir_run63(_menhir_env$1, _menhir_stack$1, /* MenhirState87 */4, _tok[0]);
      
    }
  }
}

function _menhir_run73(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok === "number" && _tok >= 23) {
    var _menhir_env$2 = _menhir_discard(_menhir_env$1);
    var _tok$1 = _menhir_env$2._menhir_token;
    if (typeof _tok$1 === "number") {
      switch (_tok$1) {
        case /* TYPE */1 :
            return _menhir_run6(_menhir_env$2, _menhir_stack$1, /* MenhirState74 */8);
        case /* TRUE */2 :
            return _menhir_run59(_menhir_env$2, _menhir_stack$1, /* MenhirState74 */8);
        case /* LP */9 :
            return _menhir_run8(_menhir_env$2, _menhir_stack$1, /* MenhirState74 */8);
        case /* FALSE */15 :
            return _menhir_run64(_menhir_env$2, _menhir_stack$1, /* MenhirState74 */8);
        case /* CALL */20 :
            var _menhir_stack$2 = /* tuple */[
              _menhir_stack$1,
              /* MenhirState74 */8
            ];
            var _menhir_env$3 = _menhir_discard(_menhir_env$2);
            var _tok$2 = _menhir_env$3._menhir_token;
            if (typeof _tok$2 === "number") {
              switch (_tok$2) {
                case /* TYPE */1 :
                    return _menhir_run6(_menhir_env$3, _menhir_stack$2, /* MenhirState75 */7);
                case /* TRUE */2 :
                    return _menhir_run59(_menhir_env$3, _menhir_stack$2, /* MenhirState75 */7);
                case /* LP */9 :
                    return _menhir_run8(_menhir_env$3, _menhir_stack$2, /* MenhirState75 */7);
                case /* FALSE */15 :
                    return _menhir_run64(_menhir_env$3, _menhir_stack$2, /* MenhirState75 */7);
                case /* AT */22 :
                    return _menhir_run9(_menhir_env$3, _menhir_stack$2, /* MenhirState75 */7);
                default:
                  if (_menhir_env$3._menhir_error) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "parser.ml",
                            478,
                            16
                          ]
                        ];
                  }
                  _menhir_env$3._menhir_error = true;
                  return _menhir_errorcase(_menhir_env$3, _menhir_stack$2, /* MenhirState75 */7);
              }
            } else {
              switch (_tok$2.tag | 0) {
                case /* STRING */0 :
                    return _menhir_run60(_menhir_env$3, _menhir_stack$2, /* MenhirState75 */7, _tok$2[0]);
                case /* INT */1 :
                    return _menhir_run61(_menhir_env$3, _menhir_stack$2, /* MenhirState75 */7, _tok$2[0]);
                case /* ID */2 :
                    return _menhir_run62(_menhir_env$3, _menhir_stack$2, /* MenhirState75 */7, _tok$2[0]);
                case /* FLOAT */3 :
                    return _menhir_run63(_menhir_env$3, _menhir_stack$2, /* MenhirState75 */7, _tok$2[0]);
                
              }
            }
        case /* AT */22 :
            return _menhir_run9(_menhir_env$2, _menhir_stack$1, /* MenhirState74 */8);
        default:
          if (_menhir_env$2._menhir_error) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    498,
                    12
                  ]
                ];
          }
          _menhir_env$2._menhir_error = true;
          return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState74 */8);
      }
    } else {
      switch (_tok$1.tag | 0) {
        case /* STRING */0 :
            return _menhir_run60(_menhir_env$2, _menhir_stack$1, /* MenhirState74 */8, _tok$1[0]);
        case /* INT */1 :
            return _menhir_run61(_menhir_env$2, _menhir_stack$1, /* MenhirState74 */8, _tok$1[0]);
        case /* ID */2 :
            return _menhir_run62(_menhir_env$2, _menhir_stack$1, /* MenhirState74 */8, _tok$1[0]);
        case /* FLOAT */3 :
            return _menhir_run63(_menhir_env$2, _menhir_stack$1, /* MenhirState74 */8, _tok$1[0]);
        
      }
    }
  }
  if (_menhir_env$1._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            502,
            8
          ]
        ];
  }
  _menhir_env$1._menhir_error = true;
  return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
}

function _menhir_run58(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok === "number") {
    switch (_tok) {
      case /* TYPE */1 :
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState58 */10);
      case /* TRUE */2 :
          return _menhir_run59(_menhir_env$1, _menhir_stack$1, /* MenhirState58 */10);
      case /* LP */9 :
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState58 */10);
      case /* FALSE */15 :
          return _menhir_run64(_menhir_env$1, _menhir_stack$1, /* MenhirState58 */10);
      case /* AT */22 :
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState58 */10);
      default:
        if (_menhir_env$1._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  392,
                  8
                ]
              ];
        }
        _menhir_env$1._menhir_error = true;
        return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState58 */10);
    }
  } else {
    switch (_tok.tag | 0) {
      case /* STRING */0 :
          return _menhir_run60(_menhir_env$1, _menhir_stack$1, /* MenhirState58 */10, _tok[0]);
      case /* INT */1 :
          return _menhir_run61(_menhir_env$1, _menhir_stack$1, /* MenhirState58 */10, _tok[0]);
      case /* ID */2 :
          return _menhir_run62(_menhir_env$1, _menhir_stack$1, /* MenhirState58 */10, _tok[0]);
      case /* FLOAT */3 :
          return _menhir_run63(_menhir_env$1, _menhir_stack$1, /* MenhirState58 */10, _tok[0]);
      
    }
  }
}

function _menhir_run67(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok === "number") {
    switch (_tok) {
      case /* TYPE */1 :
          return _menhir_run6(_menhir_env$1, _menhir_stack$1, /* MenhirState67 */9);
      case /* TRUE */2 :
          return _menhir_run59(_menhir_env$1, _menhir_stack$1, /* MenhirState67 */9);
      case /* LP */9 :
          return _menhir_run8(_menhir_env$1, _menhir_stack$1, /* MenhirState67 */9);
      case /* FALSE */15 :
          return _menhir_run64(_menhir_env$1, _menhir_stack$1, /* MenhirState67 */9);
      case /* AT */22 :
          return _menhir_run9(_menhir_env$1, _menhir_stack$1, /* MenhirState67 */9);
      default:
        if (_menhir_env$1._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  421,
                  8
                ]
              ];
        }
        _menhir_env$1._menhir_error = true;
        return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState67 */9);
    }
  } else {
    switch (_tok.tag | 0) {
      case /* STRING */0 :
          return _menhir_run60(_menhir_env$1, _menhir_stack$1, /* MenhirState67 */9, _tok[0]);
      case /* INT */1 :
          return _menhir_run61(_menhir_env$1, _menhir_stack$1, /* MenhirState67 */9, _tok[0]);
      case /* ID */2 :
          return _menhir_run62(_menhir_env$1, _menhir_stack$1, /* MenhirState67 */9, _tok[0]);
      case /* FLOAT */3 :
          return _menhir_run63(_menhir_env$1, _menhir_stack$1, /* MenhirState67 */9, _tok[0]);
      
    }
  }
}

function _menhir_reduce17(_menhir_env, _menhir_stack, _menhir_s) {
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 2) {
      if (_menhir_s$1 !== 11) {
        return _menhir_fail(undefined);
      }
      var match = _menhir_stack$1[0];
      var match$1 = match[0];
      var _v_000 = match[1];
      var _v_001 = {
        suite: _v,
        phi: _menhir_stack$1[1]
      };
      var _v$1 = /* tuple */[
        _v_000,
        _v_001
      ];
      var _menhir_stack_000 = match$1[0];
      var _menhir_stack_001 = match$1[1];
      var _menhir_stack$2 = /* tuple */[
        _menhir_stack_000,
        _menhir_stack_001,
        _v$1
      ];
      if (_menhir_env._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                172,
                10
              ]
            ];
      }
      var _tok = _menhir_env._menhir_token;
      if (typeof _tok === "number") {
        if (_tok === 11) {
          return _menhir_run36(_menhir_env, _menhir_stack$2, /* MenhirState101 */1);
        }
        if (_tok === 14) {
          return _menhir_reduce13(_menhir_env, _menhir_stack$2, /* MenhirState101 */1);
        }
        
      }
      if (_menhir_env._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                180,
                12
              ]
            ];
      }
      _menhir_env._menhir_error = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack$2, /* MenhirState101 */1);
    }
    var _v_000$1 = _menhir_stack$1[2];
    var _v$2 = /* :: */[
      _v_000$1,
      _v
    ];
    __v = _v$2;
    __menhir_s = _menhir_stack$1[1];
    __menhir_stack = _menhir_stack$1[0];
    continue ;
  };
}

function _menhir_run85(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok !== "number" && _tok.tag === /* ID */2) {
    var _menhir_env$2 = _menhir_discard(_menhir_env$1);
    var _v = /* Goto */Block.__(1, [_tok[0]]);
    return _menhir_goto_instr(_menhir_env$2, _menhir_stack, _menhir_s, _v);
  }
  if (_menhir_env$1._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            548,
            8
          ]
        ];
  }
  _menhir_env$1._menhir_error = true;
  return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
}

function _menhir_goto_typ(__menhir_env, __menhir_stack, __menhir_s, __v) {
  while(true) {
    var _v = __v;
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    var _menhir_env = __menhir_env;
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s,
      _v
    ];
    var exit = 0;
    if (_menhir_s >= 11) {
      if (_menhir_s < 20) {
        return _menhir_fail(undefined);
      }
      switch (_menhir_s - 20 | 0) {
        case /* MenhirState106 */0 :
        case /* MenhirState101 */1 :
            exit = 1;
            break;
        case /* MenhirState93 */2 :
            if (_menhir_env._menhir_error) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1846,
                      10
                    ]
                  ];
            }
            var _tok = _menhir_env._menhir_token;
            var exit$1 = 0;
            if (typeof _tok === "number" && _tok === 6) {
              var _menhir_env$1 = _menhir_discard(_menhir_env);
              var _v$1 = /* TypeT */Block.__(2, [_v]);
              __v = _v$1;
              __menhir_s = _menhir_stack[1];
              __menhir_stack = _menhir_stack[0];
              __menhir_env = _menhir_env$1;
              continue ;
            }
            exit$1 = 2;
            if (exit$1 === 2) {
              if (_menhir_env._menhir_error) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "parser.ml",
                        1866,
                        12
                      ]
                    ];
              }
              _menhir_env._menhir_error = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
            }
            break;
        case /* MenhirState89 */3 :
            var _menhir_s$1 = _menhir_stack[1];
            var _menhir_stack$2 = _menhir_stack[0];
            var _v_000 = _menhir_stack[2];
            var _v$2 = /* tuple */[
              _v_000,
              _v
            ];
            var _menhir_stack$3 = /* tuple */[
              _menhir_stack$2,
              _menhir_s$1,
              _v$2
            ];
            if (_menhir_env._menhir_error) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1903,
                      10
                    ]
                  ];
            }
            var _tok$1 = _menhir_env._menhir_token;
            var exit$2 = 0;
            if (typeof _tok$1 === "number") {
              if (_tok$1 !== 4) {
                if (_tok$1 !== 18) {
                  exit$2 = 2;
                } else {
                  var _menhir_env$2 = _menhir_discard(_menhir_env);
                  var _tok$2 = _menhir_env$2._menhir_token;
                  var exit$3 = 0;
                  if (typeof _tok$2 === "number") {
                    exit$3 = 3;
                  } else {
                    if (_tok$2.tag === /* ID */2) {
                      return _menhir_run4(_menhir_env$2, _menhir_stack$3, /* MenhirState33 */17, _tok$2[0]);
                    }
                    exit$3 = 3;
                  }
                  if (exit$3 === 3) {
                    if (_menhir_env$2._menhir_error) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "parser.ml",
                              1915,
                              16
                            ]
                          ];
                    }
                    _menhir_env$2._menhir_error = true;
                    return _menhir_errorcase(_menhir_env$2, _menhir_stack$3, /* MenhirState33 */17);
                  }
                  
                }
              } else {
                var _v$3 = /* :: */[
                  _v$2,
                  /* [] */0
                ];
                var __menhir_stack$1 = _menhir_stack$2;
                var __menhir_s$1 = _menhir_s$1;
                var __v$1 = _v$3;
                while(true) {
                  var _v$4 = __v$1;
                  var _menhir_s$2 = __menhir_s$1;
                  var _menhir_stack$4 = __menhir_stack$1;
                  if (_menhir_s$2 !== 17) {
                    if (_menhir_s$2 !== 24) {
                      return _menhir_fail(undefined);
                    } else {
                      return _menhir_goto_loption_separated_nonempty_list_COMMA_ann__(_menhir_env, _menhir_stack$4, _menhir_s$2, _v$4);
                    }
                  }
                  var _v_000$1 = _menhir_stack$4[2];
                  var _v$5 = /* :: */[
                    _v_000$1,
                    _v$4
                  ];
                  __v$1 = _v$5;
                  __menhir_s$1 = _menhir_stack$4[1];
                  __menhir_stack$1 = _menhir_stack$4[0];
                  continue ;
                };
              }
            } else {
              exit$2 = 2;
            }
            if (exit$2 === 2) {
              if (_menhir_env._menhir_error) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "parser.ml",
                        1929,
                        12
                      ]
                    ];
              }
              _menhir_env._menhir_error = true;
              return _menhir_errorcase(_menhir_env, _menhir_stack$2, _menhir_s$1);
            }
            break;
        case /* MenhirState87 */4 :
        case /* MenhirState80 */5 :
            return _menhir_fail(undefined);
        
      }
    } else {
      if (_menhir_s < 3) {
        return _menhir_fail(undefined);
      }
      var _v$6 = /* S */Block.__(0, [/* TypeL */Block.__(6, [_v])]);
      return _menhir_goto_repr(_menhir_env, _menhir_stack, _menhir_s, _v$6);
    }
    if (exit === 1) {
      if (_menhir_env._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                1807,
                10
              ]
            ];
      }
      var _tok$3 = _menhir_env._menhir_token;
      var exit$4 = 0;
      if (typeof _tok$3 === "number") {
        if (_tok$3 !== 4) {
          if (_tok$3 !== 0) {
            exit$4 = 2;
          } else {
            var _menhir_env$3 = _menhir_discard(_menhir_env);
            var _tok$4 = _menhir_env$3._menhir_token;
            var exit$5 = 0;
            if (typeof _tok$4 === "number") {
              if (_tok$4 === 1) {
                return _menhir_run6(_menhir_env$3, _menhir_stack$1, /* MenhirState13 */20);
              }
              if (_tok$4 === 9) {
                return _menhir_run8(_menhir_env$3, _menhir_stack$1, /* MenhirState13 */20);
              }
              if (_tok$4 === 22) {
                return _menhir_run9(_menhir_env$3, _menhir_stack$1, /* MenhirState13 */20);
              }
              exit$5 = 3;
            } else {
              exit$5 = 3;
            }
            if (exit$5 === 3) {
              if (_menhir_env$3._menhir_error) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "parser.ml",
                        1823,
                        16
                      ]
                    ];
              }
              _menhir_env$3._menhir_error = true;
              return _menhir_errorcase(_menhir_env$3, _menhir_stack$1, /* MenhirState13 */20);
            }
            
          }
        } else {
          var _v$7 = /* :: */[
            _v,
            /* [] */0
          ];
          var __menhir_stack$2 = _menhir_stack;
          var __menhir_s$2 = _menhir_s;
          var __v$2 = _v$7;
          while(true) {
            var _v$8 = __v$2;
            var _menhir_s$3 = __menhir_s$2;
            var _menhir_stack$5 = __menhir_stack$2;
            if (_menhir_s$3 !== 20) {
              if (_menhir_s$3 !== 21) {
                return _menhir_fail(undefined);
              } else {
                return _menhir_goto_loption_separated_nonempty_list_XOR_typ__(_menhir_env, _menhir_stack$5, _menhir_s$3, _v$8);
              }
            }
            var _v_000$2 = _menhir_stack$5[2];
            var _v$9 = /* :: */[
              _v_000$2,
              _v$8
            ];
            __v$2 = _v$9;
            __menhir_s$2 = _menhir_stack$5[1];
            __menhir_stack$2 = _menhir_stack$5[0];
            continue ;
          };
        }
      } else {
        exit$4 = 2;
      }
      if (exit$4 === 2) {
        if (_menhir_env._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  1837,
                  12
                ]
              ];
        }
        _menhir_env._menhir_error = true;
        return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
      }
      
    }
    
  };
}

function _menhir_goto_loption_separated_nonempty_list_COMMA_ID__(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1960,
            6
          ]
        ];
  }
  var _tok = _menhir_env._menhir_token;
  if (typeof _tok === "number" && _tok === 6) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _v_args = _menhir_stack[2];
    var _v_other_bounds = List.map((function (x) {
            return /* tuple */[
                    x,
                    /* BottomT */2
                  ];
          }), _v);
    var _v$1 = {
      args: _v_args,
      kwargs: /* [] */0,
      globals: /* [] */0,
      other_bounds: _v_other_bounds
    };
    var _menhir_stack_000 = _menhir_stack[0];
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack_000,
      _v$1
    ];
    if (_menhir_env$1._menhir_error) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              2008,
              10
            ]
          ];
    }
    var _tok$1 = _menhir_env$1._menhir_token;
    var exit = 0;
    if (typeof _tok$1 === "number") {
      if (_tok$1 === 11) {
        return _menhir_run36(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */16);
      }
      if (_tok$1 === 14) {
        return _menhir_reduce13(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */16);
      }
      exit = 2;
    } else {
      exit = 2;
    }
    if (exit === 2) {
      if (_menhir_env$1._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                2016,
                12
              ]
            ];
      }
      _menhir_env$1._menhir_error = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState35 */16);
    }
    
  }
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            2020,
            8
          ]
        ];
  }
  _menhir_env._menhir_error = true;
  return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
}

function _menhir_run4(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok === "number" && _tok === 19) {
    var _menhir_env$2 = _menhir_discard(_menhir_env$1);
    var _tok$1 = _menhir_env$2._menhir_token;
    var exit = 0;
    if (typeof _tok$1 === "number") {
      if (_tok$1 === 1) {
        return _menhir_run6(_menhir_env$2, _menhir_stack$1, /* MenhirState5 */23);
      }
      if (_tok$1 === 9) {
        return _menhir_run8(_menhir_env$2, _menhir_stack$1, /* MenhirState5 */23);
      }
      if (_tok$1 === 22) {
        return _menhir_run9(_menhir_env$2, _menhir_stack$1, /* MenhirState5 */23);
      }
      exit = 2;
    } else {
      exit = 2;
    }
    if (exit === 2) {
      if (_menhir_env$2._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                2384,
                12
              ]
            ];
      }
      _menhir_env$2._menhir_error = true;
      return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState5 */23);
    }
    
  }
  if (_menhir_env$1._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            2388,
            8
          ]
        ];
  }
  _menhir_env$1._menhir_error = true;
  return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
}

function _menhir_run41(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok === "number" && _tok === 19) {
    var _menhir_env$2 = _menhir_discard(_menhir_env$1);
    var _tok$1 = _menhir_env$2._menhir_token;
    var exit = 0;
    if (typeof _tok$1 === "number") {
      switch (_tok$1) {
        case /* XOR */0 :
        case /* RB */6 :
            return _menhir_goto_loption_separated_nonempty_list_COMMA_move__(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */14, /* [] */0);
        default:
          exit = 2;
      }
    } else {
      if (_tok$1.tag === /* ID */2) {
        var __menhir_env = _menhir_env$2;
        var __menhir_stack = _menhir_stack$1;
        var __menhir_s = /* MenhirState42 */14;
        var __v = _tok$1[0];
        while(true) {
          var _v$1 = __v;
          var _menhir_s$1 = __menhir_s;
          var _menhir_stack$2 = __menhir_stack;
          var _menhir_env$3 = __menhir_env;
          var _menhir_env$4 = _menhir_discard(_menhir_env$3);
          var _tok$2 = _menhir_env$4._menhir_token;
          if (typeof _tok$2 === "number" && _tok$2 === 8) {
            var _menhir_env$5 = _menhir_discard(_menhir_env$4);
            var _tok$3 = _menhir_env$5._menhir_token;
            var exit$1 = 0;
            if (typeof _tok$3 === "number" || _tok$3.tag !== /* ID */2) {
              exit$1 = 2;
            } else {
              var _menhir_env$6 = _menhir_discard(_menhir_env$5);
              var _v_001 = _tok$3[0];
              var _v$2 = /* tuple */[
                _v$1,
                _v_001
              ];
              var _menhir_stack$3 = /* tuple */[
                _menhir_stack$2,
                _menhir_s$1,
                _v$2
              ];
              if (_menhir_env$6._menhir_error) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "parser.ml",
                        724,
                        14
                      ]
                    ];
              }
              var _tok$4 = _menhir_env$6._menhir_token;
              var exit$2 = 0;
              if (typeof _tok$4 === "number") {
                if (_tok$4 < 7) {
                  if (_tok$4 > 5 || _tok$4 < 1) {
                    var _v$3 = /* :: */[
                      _v$2,
                      /* [] */0
                    ];
                    var __menhir_stack$1 = _menhir_stack$2;
                    var __menhir_s$1 = _menhir_s$1;
                    var __v$1 = _v$3;
                    while(true) {
                      var _v$4 = __v$1;
                      var _menhir_s$2 = __menhir_s$1;
                      var _menhir_stack$4 = __menhir_stack$1;
                      if (_menhir_s$2 !== 13) {
                        if (_menhir_s$2 !== 14) {
                          return _menhir_fail(undefined);
                        } else {
                          return _menhir_goto_loption_separated_nonempty_list_COMMA_move__(_menhir_env$6, _menhir_stack$4, _menhir_s$2, _v$4);
                        }
                      }
                      var _v_000 = _menhir_stack$4[2];
                      var _v$5 = /* :: */[
                        _v_000,
                        _v$4
                      ];
                      __v$1 = _v$5;
                      __menhir_s$1 = _menhir_stack$4[1];
                      __menhir_stack$1 = _menhir_stack$4[0];
                      continue ;
                    };
                  }
                  exit$2 = 3;
                } else if (_tok$4 !== 18) {
                  exit$2 = 3;
                } else {
                  var _menhir_env$7 = _menhir_discard(_menhir_env$6);
                  var _tok$5 = _menhir_env$7._menhir_token;
                  var exit$3 = 0;
                  if (typeof _tok$5 === "number") {
                    exit$3 = 4;
                  } else {
                    if (_tok$5.tag === /* ID */2) {
                      __v = _tok$5[0];
                      __menhir_s = /* MenhirState48 */13;
                      __menhir_stack = _menhir_stack$3;
                      __menhir_env = _menhir_env$7;
                      continue ;
                    }
                    exit$3 = 4;
                  }
                  if (exit$3 === 4) {
                    if (_menhir_env$7._menhir_error) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            /* tuple */[
                              "parser.ml",
                              736,
                              20
                            ]
                          ];
                    }
                    _menhir_env$7._menhir_error = true;
                    return _menhir_errorcase(_menhir_env$7, _menhir_stack$3, /* MenhirState48 */13);
                  }
                  
                }
              } else {
                exit$2 = 3;
              }
              if (exit$2 === 3) {
                if (_menhir_env$6._menhir_error) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "parser.ml",
                          750,
                          16
                        ]
                      ];
                }
                _menhir_env$6._menhir_error = true;
                return _menhir_errorcase(_menhir_env$6, _menhir_stack$2, _menhir_s$1);
              }
              
            }
            if (exit$1 === 2) {
              if (_menhir_env$5._menhir_error) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "parser.ml",
                        757,
                        12
                      ]
                    ];
              }
              _menhir_env$5._menhir_error = true;
              return _menhir_errorcase(_menhir_env$5, _menhir_stack$2, _menhir_s$1);
            }
            
          }
          if (_menhir_env$4._menhir_error) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    768,
                    8
                  ]
                ];
          }
          _menhir_env$4._menhir_error = true;
          return _menhir_errorcase(_menhir_env$4, _menhir_stack$2, _menhir_s$1);
        };
      }
      exit = 2;
    }
    if (exit === 2) {
      if (_menhir_env$2._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                1216,
                12
              ]
            ];
      }
      _menhir_env$2._menhir_error = true;
      return _menhir_errorcase(_menhir_env$2, _menhir_stack$1, /* MenhirState42 */14);
    }
    
  }
  if (_menhir_env$1._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1220,
            8
          ]
        ];
  }
  _menhir_env$1._menhir_error = true;
  return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
}

function _menhir_goto_instr(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            963,
            6
          ]
        ];
  }
  var _tok = _menhir_env._menhir_token;
  if (typeof _tok === "number" && _tok === 3) {
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _menhir_stack$1 = /* tuple */[
      _menhir_stack,
      _menhir_s,
      _v
    ];
    if (_menhir_env$1._menhir_error) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              986,
              10
            ]
          ];
    }
    var _tok$1 = _menhir_env$1._menhir_token;
    var exit = 0;
    if (typeof _tok$1 === "number") {
      switch (_tok$1) {
        case /* RETURN */5 :
            return _menhir_run58(_menhir_env$1, _menhir_stack$1, /* MenhirState93 */2);
        case /* IF */12 :
            return _menhir_run67(_menhir_env$1, _menhir_stack$1, /* MenhirState93 */2);
        case /* GOTO */13 :
            return _menhir_run85(_menhir_env$1, _menhir_stack$1, /* MenhirState93 */2);
        case /* LABEL */11 :
        case /* FED */14 :
            return _menhir_reduce17(_menhir_env$1, _menhir_stack$1, /* MenhirState93 */2);
        case /* CALL */20 :
            return _menhir_run87(_menhir_env$1, _menhir_stack$1, /* MenhirState93 */2);
        default:
          exit = 2;
      }
    } else {
      if (_tok$1.tag === /* ID */2) {
        return _menhir_run73(_menhir_env$1, _menhir_stack$1, /* MenhirState93 */2, _tok$1[0]);
      }
      exit = 2;
    }
    if (exit === 2) {
      if (_menhir_env$1._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                1002,
                12
              ]
            ];
      }
      _menhir_env$1._menhir_error = true;
      return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState93 */2);
    }
    
  }
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1006,
            8
          ]
        ];
  }
  _menhir_env._menhir_error = true;
  return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
}

function _menhir_goto_loption_separated_nonempty_list_COMMA_move__(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_s$1 = _menhir_stack[1];
  var _menhir_stack$1 = _menhir_stack[0];
  var _v_000 = _menhir_stack[2];
  var _v$1 = /* tuple */[
    _v_000,
    _v
  ];
  var _menhir_stack$2 = /* tuple */[
    _menhir_stack$1,
    _menhir_s$1,
    _v$1
  ];
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            625,
            6
          ]
        ];
  }
  var _tok = _menhir_env._menhir_token;
  if (typeof _tok === "number") {
    if (_tok !== 6) {
      if (_tok === 0) {
        var _menhir_env$1 = _menhir_discard(_menhir_env);
        var _tok$1 = _menhir_env$1._menhir_token;
        var exit = 0;
        if (typeof _tok$1 === "number") {
          exit = 2;
        } else {
          if (_tok$1.tag === /* ID */2) {
            return _menhir_run41(_menhir_env$1, _menhir_stack$2, /* MenhirState55 */12, _tok$1[0]);
          }
          exit = 2;
        }
        if (exit === 2) {
          if (_menhir_env$1._menhir_error) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    637,
                    12
                  ]
                ];
          }
          _menhir_env$1._menhir_error = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$2, /* MenhirState55 */12);
        }
        
      }
      
    } else {
      var _v$2 = /* :: */[
        _v$1,
        /* [] */0
      ];
      var __menhir_stack = _menhir_stack$1;
      var __menhir_s = _menhir_s$1;
      var __v = _v$2;
      while(true) {
        var _v$3 = __v;
        var _menhir_s$2 = __menhir_s;
        var _menhir_stack$3 = __menhir_stack;
        if (_menhir_s$2 !== 12) {
          if (_menhir_s$2 !== 15) {
            return _menhir_fail(undefined);
          } else {
            return _menhir_goto_loption_separated_nonempty_list_XOR_branch__(_menhir_env, _menhir_stack$3, _menhir_s$2, _v$3);
          }
        }
        var _v_000$1 = _menhir_stack$3[2];
        var _v$4 = /* :: */[
          _v_000$1,
          _v$3
        ];
        __v = _v$4;
        __menhir_s = _menhir_stack$3[1];
        __menhir_stack = _menhir_stack$3[0];
        continue ;
      };
    }
  }
  if (_menhir_env._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            651,
            8
          ]
        ];
  }
  _menhir_env._menhir_error = true;
  return _menhir_errorcase(_menhir_env, _menhir_stack$1, _menhir_s$1);
}

function _menhir_reduce25(_menhir_env, _menhir_stack, _menhir_s) {
  return _menhir_goto_loption_separated_nonempty_list_COMMA_repr__(_menhir_env, _menhir_stack, _menhir_s, /* [] */0);
}

function _menhir_reduce13(_menhir_env, _menhir_stack, _menhir_s) {
  var __menhir_stack = _menhir_stack;
  var __menhir_s = _menhir_s;
  var __v = /* [] */0;
  while(true) {
    var _v = __v;
    var _menhir_s$1 = __menhir_s;
    var _menhir_stack$1 = __menhir_stack;
    if (_menhir_s$1 !== 1) {
      if (_menhir_s$1 !== 16) {
        return _menhir_fail(undefined);
      }
      if (_menhir_env._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                1041,
                10
              ]
            ];
      }
      var _tok = _menhir_env._menhir_token;
      if (typeof _tok === "number" && _tok === 14) {
        var _menhir_env$1 = _menhir_discard(_menhir_env);
        var match = _menhir_stack$1[0];
        var match$1 = match[0];
        var _v_000 = match[1];
        var _v_001 = {
          func_entry: _menhir_stack$1[1],
          body: _v
        };
        var _v$1 = /* tuple */[
          _v_000,
          _v_001
        ];
        var _menhir_stack_000 = match$1[0];
        var _menhir_stack_001 = match$1[1];
        var _menhir_stack$2 = /* tuple */[
          _menhir_stack_000,
          _menhir_stack_001,
          _v$1
        ];
        if (_menhir_env$1._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  1077,
                  14
                ]
              ];
        }
        var _tok$1 = _menhir_env$1._menhir_token;
        var exit = 0;
        if (typeof _tok$1 === "number") {
          if (_tok$1 === 16) {
            return _menhir_reduce15(_menhir_env$1, _menhir_stack$2, /* MenhirState106 */0);
          }
          if (_tok$1 === 17) {
            return _menhir_run1(_menhir_env$1, _menhir_stack$2, /* MenhirState106 */0);
          }
          exit = 2;
        } else {
          exit = 2;
        }
        if (exit === 2) {
          if (_menhir_env$1._menhir_error) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1085,
                    16
                  ]
                ];
          }
          _menhir_env$1._menhir_error = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$2, /* MenhirState106 */0);
        }
        
      }
      if (_menhir_env._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                1089,
                12
              ]
            ];
      }
      _menhir_env._menhir_error = true;
      return _menhir_errorcase(_menhir_env, _menhir_stack$1, _menhir_s$1);
    }
    var _v_000$1 = _menhir_stack$1[2];
    var _v$2 = /* :: */[
      _v_000$1,
      _v
    ];
    __v = _v$2;
    __menhir_s = _menhir_stack$1[1];
    __menhir_stack = _menhir_stack$1[0];
    continue ;
  };
}

function _menhir_run36(_menhir_env, _menhir_stack, _menhir_s) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok !== "number" && _tok.tag === /* ID */2) {
    var _menhir_stack_001 = _tok[0];
    var _menhir_stack$2 = /* tuple */[
      _menhir_stack$1,
      _menhir_stack_001
    ];
    var _menhir_env$2 = _menhir_discard(_menhir_env$1);
    var _tok$1 = _menhir_env$2._menhir_token;
    var exit = 0;
    if (typeof _tok$1 === "number" && _tok$1 === 19) {
      var _menhir_env$3 = _menhir_discard(_menhir_env$2);
      var _tok$2 = _menhir_env$3._menhir_token;
      var exit$1 = 0;
      if (typeof _tok$2 === "number" && _tok$2 === 7) {
        var _menhir_env$4 = _menhir_discard(_menhir_env$3);
        var _tok$3 = _menhir_env$4._menhir_token;
        var exit$2 = 0;
        if (typeof _tok$3 === "number" && _tok$3 === 10) {
          var _menhir_env$5 = _menhir_discard(_menhir_env$4);
          var _tok$4 = _menhir_env$5._menhir_token;
          var exit$3 = 0;
          if (typeof _tok$4 === "number") {
            if (_tok$4 === /* RB */6) {
              return _menhir_goto_loption_separated_nonempty_list_XOR_branch__(_menhir_env$5, _menhir_stack$2, /* MenhirState40 */15, /* [] */0);
            }
            exit$3 = 5;
          } else {
            if (_tok$4.tag === /* ID */2) {
              return _menhir_run41(_menhir_env$5, _menhir_stack$2, /* MenhirState40 */15, _tok$4[0]);
            }
            exit$3 = 5;
          }
          if (exit$3 === 5) {
            if (_menhir_env$5._menhir_error) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    /* tuple */[
                      "parser.ml",
                      1675,
                      24
                    ]
                  ];
            }
            _menhir_env$5._menhir_error = true;
            return _menhir_errorcase(_menhir_env$5, _menhir_stack$2, /* MenhirState40 */15);
          }
          
        } else {
          exit$2 = 4;
        }
        if (exit$2 === 4) {
          if (_menhir_env$4._menhir_error) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    1679,
                    20
                  ]
                ];
          }
          _menhir_env$4._menhir_error = true;
          throw $$Error;
        }
        
      } else {
        exit$1 = 3;
      }
      if (exit$1 === 3) {
        if (_menhir_env$3._menhir_error) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  1685,
                  16
                ]
              ];
        }
        _menhir_env$3._menhir_error = true;
        return _menhir_errorcase(_menhir_env$3, _menhir_stack, _menhir_s);
      }
      
    } else {
      exit = 2;
    }
    if (exit === 2) {
      if (_menhir_env$2._menhir_error) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                1696,
                12
              ]
            ];
      }
      _menhir_env$2._menhir_error = true;
      return _menhir_errorcase(_menhir_env$2, _menhir_stack, _menhir_s);
    }
    
  }
  if (_menhir_env$1._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            1707,
            8
          ]
        ];
  }
  _menhir_env$1._menhir_error = true;
  return _menhir_errorcase(_menhir_env$1, _menhir_stack, _menhir_s);
}

function prog(lexer, lexbuf) {
  var _menhir_env = {
    _menhir_lexer: lexer,
    _menhir_lexbuf: lexbuf,
    _menhir_token: undefined,
    _menhir_error: false
  };
  var _menhir_stack_001 = _menhir_env._menhir_lexbuf.lex_curr_p;
  var _menhir_stack = /* tuple */[
    undefined,
    _menhir_stack_001
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _tok = _menhir_env$1._menhir_token;
  if (typeof _tok === "number") {
    if (_tok === 16) {
      return _menhir_reduce15(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
    }
    if (_tok === 17) {
      return _menhir_run1(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
    }
    
  }
  if (_menhir_env$1._menhir_error) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            2669,
            8
          ]
        ];
  }
  _menhir_env$1._menhir_error = true;
  return _menhir_errorcase(_menhir_env$1, _menhir_stack, /* MenhirState0 */25);
}

exports.$$Error = $$Error;
exports.prog = prog;
/* Core-Jit Not a pure module */
