(* type pyo = unit ptr
 * external pyDict_New : unit -> pyo = "PyDict_New"
 * external pyeval : string -> pyo = "PyRun_SimpleString"
 * external pyModule_GetDict : pyo -> pyo = "PyModule_GetDict"
 * external pyImport_AddModule : string -> pyo = "PyImport_AddModule"
 * external _pybytes : pyo -> pyo = "PyObject_Bytes"
 * external _bytes2str : pyo -> string = "PyBytes_AsString"
 * external pyinit : unit -> unit = "Py_Initialize"
 * external pyunicode : string -> pyo = "PyUnicode_FromString"
 * external incref : pyo -> unit = "Py_IncRef"
 * external decrec : pyo -> unit = "Py_DecRef"
 * external pycall : pyo * pyo -> pyo = "PyObject_CallObject"
 * let pystr : pyo -> string = fun x -> _bytes2str (_pybytes x)
 * let module_dict : string -> pyo = fun s ->
 *   pyModule_GetDict @@ pyImport_AddModule s
 * 
 * let _ =
 *   begin
 *     pyinit();
 *     
 *   end *)
type pyo
type load = int64
type i32

external runcode : string -> i32 -> pyo -> pyo -> pyo =  "PyRun_SimpleString"
external call0 : pyo -> unit = "PyObject_CallFunction"
external pyDict_New : unit -> pyo = "PyDict_New"
external eval_code : pyo -> pyo -> pyo -> pyo = "PyEval_EvalCode"
external pyinit : unit -> unit = "Py_Initialize"
external errprint : unit -> unit = "PyErr_Print"
external compile : string -> string -> i32 -> pyo = "Py_CompileString" 
external mkint : int -> i32 = "mkint"

let main() =
  let _ = pyinit() in
  let d = pyDict_New() in 
  let c = compile "max" "a.py" (mkint 257) in
  let _ = eval_code c d d in
  errprint() 
